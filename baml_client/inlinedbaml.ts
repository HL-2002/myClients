/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "carPolicy.baml": "class CarPolicy {\n    emission_date string @description(#\"\n        The date the policy was issued in DD/MM/YYYY format.\n    \"#)\n    valid_through string @description(#\"\n        The date the policy is valid through in DD/MM/YYYY format.\n    \"#)\n    client string @description(#\"\n        Full name of the person paying for the policy.\n    \"#)\n    id string @description(#\"\n        The client ID.\n    \"#)\n    insured string @description(#\"\n        Insured vehicle model.\n    \"#)\n    age int @description(#\"\n        The age of the insured person.\n    \"#)\n    policy_id string @description(#\"\n        The policy id.\n    \"#) \n    branch string @description(#\"\n        The branch of the insurance policy, like HCM Individual or Global Benefists.\n    \"#)\n    company string @description(#\"\n        The name of the insurance company.\n    \"#)\n    producer string?\n    intermediary string @description(#\"\n        The name of the intermediary.\n    \"#)\n    renewal bool @description(#\"\n        True if the policy is being renewed, false if it's new.\n    \"#)\n    coverage float @description(#\"\n        The amount of coverage provided by the policy.\n    \"#)\n    premium float @description(#\"\n        The premium amount for the policy.\n    \"#)\n    payment_method string? @description(#\"\n        The method of payment for the policy, either full or N installments.\n    \"#)\n    initial_installment float? @description(#\"\n        The initial installment amount for the policy, only if specified.\n    \"#)\n    installments int? @description(#\"\n        The number of installments for the policy, 2 for semestral, 4 for trimestral, 12 for monthly.\n    \"#)\n    installment_amount float? @description(#\"\n        The amount of each installment for the policy, present as the amount to charge.\n    \"#) \n    last_payment string? @description(#\"\n        The date of the last payment in DD/MM/YYYY format, only if specified.\n    \"#)\n    receipt string @description(#\"\n        The receipt number for the policy.\n    \"#)\n}",
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\nclient<llm> GeminiFlash {\n  provider google-ai\n  options {\n    model \"gemini-1.5-flash\"\n  }\n}\n\nclient<llm> GeminiPro {\n  provider google-ai\n  options {\n    model \"gemini-1.5-pro\"\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\n// client<llm> CustomFast {\n//   provider round-robin\n//   options {\n//     // This will alternate between clients\n//     strategy [GeminiFlash]\n//   }\n// }\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> GeminiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [GeminiFlash, GeminiPro]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.70.5\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "healthPolicy.baml": "class HealthPolicy {\n    emission_date string @description(#\"\n        The date the policy was issued in DD/MM/YYYY format.\n    \"#)\n    valid_through string @description(#\"\n        The date the policy is valid through in DD/MM/YYYY format.\n    \"#)\n    client string @description(#\"\n        Full name of the person paying for the policy.\n    \"#)\n    id string @description(#\"\n        The client ID.\n    \"#)\n    insured string @description(#\"\n        Full name of the person insured by the policy, if not specified, it's the same as the client.\n    \"#)\n    age int @description(#\"\n        The age of the insured person.\n    \"#)\n    policy_id string @description(#\"\n        The policy id.\n    \"#) \n    branch string @description(#\"\n        The branch of the insurance policy, like HCM Individual or Global Benefists.\n    \"#)\n    company string @description(#\"\n        The name of the insurance company.\n    \"#)\n    producer string?\n    intermediary string @description(#\"\n        The name of the intermediary.\n    \"#)\n    renewal bool @description(#\"\n        True if the policy is being renewed, false if it's new.\n    \"#)\n    coverage float @description(#\"\n        The amount of coverage provided by the policy.\n    \"#)\n    premium float @description(#\"\n        The premium amount for the policy.\n    \"#)\n    payment_method string? @description(#\"\n        The method of payment for the policy, either full or N installments.\n    \"#)\n    initial_installment float? @description(#\"\n        The initial installment amount for the policy, only if specified.\n    \"#)\n    installments int? @description(#\"\n        The number of installments for the policy, 2 for semestral, 4 for trimestral, 12 for monthly.\n    \"#)\n    installment_amount float? @description(#\"\n        The amount of each installment for the policy, present as the amount to charge.\n    \"#) \n    last_payment string? @description(#\"\n        The date of the last payment in DD/MM/YYYY format, only if specified.\n    \"#)\n    receipt string @description(#\"\n        The receipt number for the policy.\n    \"#)\n}\n\nfunction ExtractHealthPolicy(policy: image) -> HealthPolicy {\n    client \"google-ai/gemini-1.5-flash\"\n    prompt #\"\n        {{_.role(\"user\")}}\n\n        Extract from this content:\n        {{ policy }}\n\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest my_health_policy {\n    functions [ExtractHealthPolicy]\n    args {\n        policy {\n            file \"../test_pics/poliza_salud.png\"\n        }\n    }\n}",
  "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"google-ai/gemini-1.5-flash\" \n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest my_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}